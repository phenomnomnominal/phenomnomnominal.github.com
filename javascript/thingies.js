// Generated by CoffeeScript 1.6.2
(function() {
  var Thingie,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  Thingie = (function() {
    var REQUEST_ANIMATION_FRAME_FPS, frame, thingie, thingies, _blocks, _getRandomColour;

    thingies = [];
    _blocks = null;
    REQUEST_ANIMATION_FRAME_FPS = 60;
    frame = 0;
    _getRandomColour = function(base) {
      var b, g, r;

      r = Math.floor(Math.random() * (255 - base) + base);
      g = Math.floor(Math.random() * (255 - base) + base);
      b = Math.floor(Math.random() * (255 - base) + base);
      return parseInt(r.toString(16) + g.toString(16) + b.toString(16), 16);
    };
    if (Modernizr.webgl) {
      thingies.push((function() {
        var framesPerUpdate;

        framesPerUpdate = REQUEST_ANIMATION_FRAME_FPS / 2;
        return {
          init: function() {
            return _blocks = Blocks.home.CONTENT.blocks;
          },
          update: function() {
            var block, _i, _len;

            if (frame % framesPerUpdate === 0) {
              for (_i = 0, _len = _blocks.length; _i < _len; _i++) {
                block = _blocks[_i];
                block.object.material.color.setHex(_getRandomColour(155));
              }
            }
            return frame += 1;
          }
        };
      })());
      if (Modernizr.geolocation) {
        thingies.push((function() {
          var _getMapPosition, _locationBlock, _world;

          _world = [430, 431, 432, 433, 435, 477, 479, 481, 482, 483, 490, 491, 492, 494, 525, 526, 527, 528, 529, 530, 531, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 577, 578, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 628, 629, 630, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 678, 679, 680, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 729, 735, 736, 737, 738, 739, 741, 742, 780, 781, 785, 786, 787, 788, 791, 792, 831, 832, 836, 837, 838, 842, 843, 845, 880, 881, 882, 883, 887, 888, 894, 895, 931, 932, 937, 938, 943, 944, 945, 981, 982, 987, 993, 995, 997, 1031, 1047, 1081];
          _locationBlock = null;
          _getMapPosition = function(position) {
            var LAT_OFFSET, LAT_SPAN, LAT_STEPS, LONG_OFFSET, LONG_SPAN, LONG_STEPS, block, blockIndex, latDivision, latDivisions, latIndex, latitude, longDivision, longDivisions, longIndex, longitude, roundedLat, roundedLong, _i, _j, _k, _len, _ref, _results, _results1, _results2;

            _ref = position.coords, latitude = _ref.latitude, longitude = _ref.longitude;
            LAT_SPAN = 150;
            LAT_OFFSET = -60;
            LAT_STEPS = 14;
            latDivisions = (function() {
              _results = [];
              for (var _i = LAT_STEPS; LAT_STEPS <= 1 ? _i <= 1 : _i >= 1; LAT_STEPS <= 1 ? _i++ : _i--){ _results.push(_i); }
              return _results;
            }).apply(this).map(function(i) {
              return (i * (LAT_SPAN / LAT_STEPS)) + LAT_OFFSET;
            });
            LONG_SPAN = 360;
            LONG_OFFSET = -180;
            LONG_STEPS = 24;
            longDivisions = (function() {
              _results1 = [];
              for (var _j = 1; 1 <= LONG_STEPS ? _j <= LONG_STEPS : _j >= LONG_STEPS; 1 <= LONG_STEPS ? _j++ : _j--){ _results1.push(_j); }
              return _results1;
            }).apply(this).map(function(i) {
              return (i * (LONG_SPAN / LONG_STEPS)) + LONG_OFFSET;
            });
            if (latitude >= LAT_OFFSET) {
              latDivision = LAT_SPAN / LAT_STEPS;
              roundedLat = Math.ceil((latitude - LAT_OFFSET) / latDivision) * latDivision + LAT_OFFSET;
              longDivision = LONG_SPAN / LONG_STEPS;
              roundedLong = Math.ceil((longitude - LONG_OFFSET) / longDivision) * longDivision + LONG_OFFSET;
              latIndex = latDivisions.indexOf(roundedLat);
              longIndex = longDivisions.indexOf(roundedLong);
              blockIndex = 424 + longIndex + (50 * latIndex);
              _results2 = [];
              for (_k = 0, _len = _blocks.length; _k < _len; _k++) {
                block = _blocks[_k];
                if ((block.x + (block.y * 50)) === blockIndex) {
                  _locationBlock = block;
                  _results2.push(block.object.material.color.setHex(0x44ff44));
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            }
          };
          return {
            init: function() {
              var block, _i, _len, _ref, _results;

              _blocks = Blocks.home.CONTENT.blocks;
              setTimeout((function() {
                return navigator.geolocation.getCurrentPosition(_getMapPosition);
              }), 1000);
              _results = [];
              for (_i = 0, _len = _blocks.length; _i < _len; _i++) {
                block = _blocks[_i];
                if (_ref = block.x + (block.y * 50), __indexOf.call(_world, _ref) >= 0) {
                  _results.push(block.object.material.color.setHex(0x4444ff));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            },
            update: function() {}
          };
        })());
      }
      thingies.push((function() {
        var _createFood, _direction, _drawFood, _drawGameOver, _drawSnake, _eatFood, _food, _foodColour, _framesPerUpdate, _getNextSpot, _go, _moveSnake, _nextDirection, _reduceFrames, _reset, _score, _snake;

        _snake = _food = _foodColour = _go = _direction = _score = _nextDirection = null;
        _framesPerUpdate = 20;
        _reduceFrames = false;
        _eatFood = function(nextSpot) {
          _score += 251 - _framesPerUpdate;
          if (_framesPerUpdate > 3) {
            _reduceFrames = true;
          }
          return _snake.push(nextSpot);
        };
        _createFood = function() {
          var _results;

          _results = [];
          while (__indexOf.call(_snake, _food) >= 0) {
            _results.push(_food = (Math.floor(Math.random() * 24) + 24) + (Math.floor(Math.random() * 14) * 50) + 400);
          }
          return _results;
        };
        _getNextSpot = function(spot) {
          var _i, _j, _ref, _ref1, _results, _results1;

          if (_direction === 'RIGHT') {
            if ((_ref = spot % 100) === 47 || _ref === 97) {
              return spot - 23;
            } else {
              return spot + 1;
            }
          } else if (_direction === 'LEFT') {
            if ((_ref1 = spot % 100) === 24 || _ref1 === 74) {
              return spot + 23;
            } else {
              return spot - 1;
            }
          } else if (_direction === 'UP') {
            if (__indexOf.call((function() {
              _results = [];
              for (_i = 424; _i < 448; _i++){ _results.push(_i); }
              return _results;
            }).apply(this), spot) >= 0) {
              return spot + 650;
            } else {
              return spot - 50;
            }
          } else if (_direction === 'DOWN') {
            if (__indexOf.call((function() {
              _results1 = [];
              for (_j = 1074; _j < 1098; _j++){ _results1.push(_j); }
              return _results1;
            }).apply(this), spot) >= 0) {
              return spot - 650;
            } else {
              return spot + 50;
            }
          }
        };
        _moveSnake = function() {
          var nextSpot;

          _direction = _nextDirection;
          nextSpot = _getNextSpot(_snake[_snake.length - 1]);
          if (__indexOf.call(_snake, nextSpot) < 0) {
            if (nextSpot === _food) {
              _eatFood(nextSpot);
              _createFood();
            } else {
              _snake = _snake.slice(1);
              _snake.push(nextSpot);
            }
            return true;
          } else {
            return false;
          }
        };
        _drawSnake = function(block) {
          var _ref;

          if (_ref = block.x + (block.y * 50), __indexOf.call(_snake, _ref) >= 0) {
            if (_snake.indexOf(block.x + (block.y * 50)) === _snake.length - 1) {
              return block.object.material.color.setHex(0x4444ff);
            } else {
              return block.object.material.color.setHex(0x222222);
            }
          }
        };
        _drawFood = function(block) {
          if ((block.x + (block.y * 50)) === _food) {
            return block.object.material.color.setHex(_foodColour);
          }
        };
        _reset = function() {
          var a, block, e, k, letters, n, s, _i, _j, _len, _len1, _ref, _results;

          _snake = [875, 876, 877, 878, 879];
          _food = 885;
          _foodColour = 0x44bb44;
          _framesPerUpdate = 20;
          _direction = 'RIGHT';
          _nextDirection = 'RIGHT';
          _score = 0;
          s = [475, 476, 477, 525, 575, 576, 577, 627, 675, 676, 677];
          n = [479, 482, 529, 530, 532, 579, 581, 582, 629, 632, 679, 682];
          a = [484, 485, 486, 534, 536, 584, 585, 586, 634, 636, 684, 686];
          k = [488, 491, 538, 540, 588, 589, 638, 640, 688, 691];
          e = [493, 494, 495, 543, 593, 594, 643, 693, 694, 695];
          letters = [].concat(s, n, a, k, e);
          for (_i = 0, _len = _blocks.length; _i < _len; _i++) {
            block = _blocks[_i];
            block.object.material.color.setHex(0xddddff);
            if (_ref = block.x + (block.y * 50), __indexOf.call(letters, _ref) >= 0) {
              block.object.material.color.setHex(0x444499);
            }
          }
          _results = [];
          for (_j = 0, _len1 = _blocks.length; _j < _len1; _j++) {
            block = _blocks[_j];
            _drawSnake(block);
            _results.push(_drawFood(block));
          }
          return _results;
        };
        _drawGameOver = function() {
          var a, block, e, e2, g, letters, m, o, r, v, _i, _len, _ref, _results;

          g = [475, 476, 477, 525, 575, 577, 625, 627, 675, 676, 677];
          a = [479, 480, 481, 529, 531, 579, 580, 581, 629, 631, 679, 681];
          m = [483, 487, 533, 534, 536, 537, 583, 585, 587, 633, 637, 683, 687];
          e = [489, 490, 491, 539, 589, 590, 639, 689, 690, 691];
          o = [775, 776, 777, 825, 827, 875, 877, 925, 927, 975, 976, 977];
          v = [779, 781, 829, 831, 879, 881, 929, 931, 980];
          e2 = [783, 784, 785, 833, 883, 884, 933, 983, 984, 985];
          r = [787, 788, 837, 839, 887, 888, 937, 939, 987, 989];
          letters = [].concat(g, a, m, e, o, v, e2, r);
          _results = [];
          for (_i = 0, _len = _blocks.length; _i < _len; _i++) {
            block = _blocks[_i];
            block.object.material.color.setHex(0xddddff);
            if (_ref = block.x + (block.y * 50), __indexOf.call(letters, _ref) >= 0) {
              _results.push(block.object.material.color.setHex(0x444499));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
        return {
          init: function() {
            _blocks = Blocks.home.CONTENT.blocks;
            return _reset();
          },
          update: function() {
            var block, _i, _len;

            if (_go) {
              if (frame % _framesPerUpdate === 0) {
                if (_moveSnake()) {
                  for (_i = 0, _len = _blocks.length; _i < _len; _i++) {
                    block = _blocks[_i];
                    block.object.material.color.setHex(0xddddff);
                    _drawSnake(block);
                    _drawFood(block);
                  }
                  if (_reduceFrames) {
                    _framesPerUpdate -= 1;
                    _reduceFrames = false;
                  }
                } else {
                  _drawGameOver();
                  _go = false;
                  setTimeout((function() {
                    alert("YOUR SCORE: " + _score + "!");
                    return _reset();
                  }), 40);
                }
              }
              return frame += 1;
            }
          },
          eventHandlers: {
            keydown: function(e) {
              var _ref;

              _go = true;
              switch (e.keyCode) {
                case 37:
                  if (_direction === 'UP' || _direction === 'DOWN') {
                    _nextDirection = 'LEFT';
                  }
                  break;
                case 38:
                  if (_direction === 'LEFT' || _direction === 'RIGHT') {
                    _nextDirection = 'UP';
                  }
                  break;
                case 39:
                  if (_direction === 'UP' || _direction === 'DOWN') {
                    _nextDirection = 'RIGHT';
                  }
                  break;
                case 40:
                  if (_direction === 'LEFT' || _direction === 'RIGHT') {
                    _nextDirection = 'DOWN';
                  }
              }
              if (_ref = e.keyCode, __indexOf.call([37, 38, 39, 40], _ref) >= 0) {
                e.preventDefault();
                return false;
              } else {
                return true;
              }
            }
          }
        };
      })());
    }
    thingie = thingies[Math.floor(Math.random() * thingies.length)];
    if (thingie) {
      return (function() {
        var event, handler, _ref;

        _ref = thingie.eventHandlers;
        for (event in _ref) {
          if (!__hasProp.call(_ref, event)) continue;
          handler = _ref[event];
          $(document.body).on(event, handler);
        }
        return {
          init: thingie.init,
          update: thingie.update
        };
      })();
    }
  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Thingie = Thingie;

}).call(this);
