// Generated by CoffeeScript 1.3.3
(function() {
  var Tuner, root;

  Tuner = function() {
    var audioContext, bufferSize, error, options, sampleBuffer, success;
    navigator.getUserMedia || (navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia);
    audioContext = new AudioContext();
    bufferSize = 2048;
    sampleBuffer = new Uint8Array(8 * bufferSize);
    options = {
      audio: true,
      video: false
    };
    success = function(stream) {
      var analyser, canvas, context, src;
      src = audioContext.createMediaStreamSource(stream);
      analyser = audioContext.createJavaScriptNode(bufferSize, 1, 1);
      src.connect(analyser);
      $('.tuner').removeClass('hidden');
      canvas = $('#tuner_canvas')[0];
      canvas.height = $('.tuner').height();
      canvas.width = $('.tuner').width();
      context = canvas.getContext('2d');
      return analyser.onaudioprocess = function(e) {
        var bufferPosition, input, s, _i, _j, _ref, _ref1, _results;
        for (s = _i = bufferSize, _ref = 8 * bufferSize; bufferSize <= _ref ? _i < _ref : _i > _ref; s = bufferSize <= _ref ? ++_i : --_i) {
          sampleBuffer[s - bufferSize] = sampleBuffer[s];
        }
        input = e.inputBuffer[1];
        DSP.HAMMING.process(input);
        bufferPosition = 6 * bufferSize;
        _results = [];
        for (s = _j = 0, _ref1 = 2 * input.length; _j < _ref1; s = _j += 2) {
          sampleBuffer[bufferPosition + s] = input[s];
          _results.push(sampleBuffer[bufferPosition + s + 1] = 0);
        }
        return _results;
      };
    };
    error = function(e) {
      return console.log(e);
    };
    return navigator.getUserMedia(options, success, error);
  };

  $(function() {
    if (!window.AudioContext) {
      if (!window.webkitAudioContext) {
        throw Error('SHITTY BROWSER');
      }
      return window.AudioContext = window.webkitAudioContext;
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Tuner = Tuner;

}).call(this);
