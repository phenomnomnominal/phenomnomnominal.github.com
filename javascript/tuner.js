// Generated by CoffeeScript 1.3.3
(function() {
  var Tuner, root,
    __hasProp = {}.hasOwnProperty;

  Tuner = function() {
    var analyser, audioContext, buffer, bufferFillSize, bufferFiller, downsampleRate, error, fft, fftSize, frequencies, gauss, getPitch, hp, i, lp, options, sampleRate, success, _i;
    navigator.getUserMedia || (navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia);
    audioContext = new AudioContext();
    sampleRate = audioContext.sampleRate;
    downsampleRate = sampleRate / 4;
    fftSize = 8192;
    fft = new FFT(fftSize, downsampleRate);
    gauss = new WindowFunction(DSP.GAUSS);
    lp = audioContext.createBiquadFilter();
    lp.type = lp.LOWPASS;
    lp.frequency = 20;
    lp.Q = 0.1;
    hp = audioContext.createBiquadFilter();
    hp.type = hp.HIGHPASS;
    hp.frequency = 4000;
    hp.Q = 0.1;
    buffer = [];
    for (i = _i = 0; 0 <= fftSize ? _i < fftSize : _i > fftSize; i = 0 <= fftSize ? ++_i : --_i) {
      buffer[i] = 0;
    }
    bufferFillSize = 2048;
    bufferFiller = audioContext.createJavaScriptNode(bufferFillSize, 1, 1);
    bufferFiller.onaudioprocess = function(e) {
      var b, input, _j, _k, _ref, _ref1, _results;
      for (b = _j = bufferFillSize, _ref = buffer.length; bufferFillSize <= _ref ? _j < _ref : _j > _ref; b = bufferFillSize <= _ref ? ++_j : --_j) {
        buffer[b - bufferFillSize] = buffer[b];
      }
      input = e.inputBuffer.getChannelData(0);
      _results = [];
      for (b = _k = 0, _ref1 = input.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; b = 0 <= _ref1 ? ++_k : --_k) {
        _results.push(buffer[buffer.length - bufferFillSize + b] = input[b]);
      }
      return _results;
    };
    analyser = audioContext.createAnalyser();
    options = {
      audio: true,
      video: false
    };
    frequencies = {
      'A0': 27.5,
      'A#0': 29.1352,
      'B0': 30.8677,
      'C1': 32.7032,
      'C#1': 34.6478,
      'D1': 36.7081,
      'D#1': 38.8909,
      'E1': 41.2034,
      'F1': 43.6563,
      'F#1': 46.2493,
      'G1': 48.9994,
      'G#1': 51.9131,
      'A1': 55,
      'A#1': 58.2705,
      'B1': 61.7354,
      'C2': 65.4064,
      'C#2': 69.2957,
      'D2': 73.4162,
      'D#2': 77.7817,
      'E2': 82.4069,
      'F2': 87.3071,
      'F#2': 92.4986,
      'G2': 97.9989,
      'G#': 103.826,
      'A2': 110,
      'A#2': 116.541,
      'B2': 123.471,
      'C3': 130.813,
      'C#3': 138.591,
      'D3': 146.832,
      'D#3': 155.563,
      'E3': 164.814,
      'F3': 174.614,
      'F#3': 184.997,
      'G3': 195.998,
      'G#3': 207.652,
      'A3': 220,
      'A#3': 233.082,
      'B3': 246.942,
      'C4': 261.626,
      'C#4': 277.183,
      'D4': 293.665,
      'D#4': 311.127,
      'E4': 329.628,
      'F4': 349.228,
      'F#4': 369.994,
      'G4': 391.995,
      'G#4': 415.305,
      'A4': 440,
      'A#4': 466.164,
      'B4': 493.883,
      'C5': 523.251,
      'C#5': 554.365,
      'D5': 587.330,
      'D#5': 622.254,
      'E5': 659.255,
      'F5': 698.456,
      'F#5': 739.989,
      'G5': 783.991,
      'G#5': 830.609,
      'A5': 880,
      'A#5': 932.328,
      'B5': 987.767,
      'C6': 1046.50,
      'C#6': 1108.73,
      'D6': 1174.66,
      'D#6': 1244.51,
      'E6': 1318.51,
      'F6': 1396.91,
      'F#6': 1479.98,
      'G6': 1567.98,
      'G#6': 1661.22,
      'A6': 1760,
      'A#6': 1864.66,
      'B6': 1975.53,
      'C7': 2093,
      'C#7': 2217.46,
      'D7': 2349.32,
      'D#7': 2489.02,
      'E7': 2637.02,
      'F7': 2793.83,
      'F#7': 2959.96,
      'G7': 3135.96,
      'G#7': 3322.44,
      'A7': 3520.00,
      'A#7': 3729.31,
      'B7': 3951.07,
      'C8': 4186.01
    };
    getPitch = function(freq) {
      var diff, key, minDiff, note, val;
      console.log(freq);
      minDiff = Infinity;
      diff = Infinity;
      for (key in frequencies) {
        if (!__hasProp.call(frequencies, key)) continue;
        val = frequencies[key];
        if (Math.abs(freq - val) < minDiff) {
          minDiff = Math.abs(freq - val);
          diff = freq - val;
          note = key;
        }
      }
      return [note, diff];
    };
    success = function(stream) {
      var canvas, context, data, maxFreq, maxTime, noiseCount, noiseThreshold, parabolicInterp, src;
      src = audioContext.createMediaStreamSource(stream);
      src.connect(lp);
      lp.connect(hp);
      hp.connect(bufferFiller);
      bufferFiller.connect(analyser);
      $('.tuner').removeClass('hidden');
      canvas = $('#tuner_canvas')[0];
      canvas.height = $('.tuner').height();
      canvas.width = $('.tuner').width();
      context = canvas.getContext('2d');
      maxTime = 0;
      maxFreq = 0;
      noiseCount = 0;
      noiseThreshold = -Infinity;
      parabolicInterp = function(left, peak, right) {
        return (0.5 * ((left.y - right.y) / (left.y - (2 * peak.y) + right.y)) + peak.x) * (sampleRate / fftSize);
      };
      data = function() {
        var b, bufferCopy, diff, downsampled, f, firstFreq, freq, freqWidth, left, newMaxTime, note, p, peak, peaks, q, right, s, secondFreq, spectrumPoints, thirdFreq, timeWidth, upsampled, x, _j, _k, _l, _len, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _results;
        bufferCopy = (function() {
          var _j, _len, _results;
          _results = [];
          for (_j = 0, _len = buffer.length; _j < _len; _j++) {
            b = buffer[_j];
            _results.push(b);
          }
          return _results;
        })();
        gauss.process(bufferCopy);
        downsampled = [];
        for (s = _j = 0, _ref = bufferCopy.length; _j < _ref; s = _j += 4) {
          downsampled.push(bufferCopy[s]);
        }
        upsampled = [];
        for (_k = 0, _len = downsampled.length; _k < _len; _k++) {
          s = downsampled[_k];
          upsampled.push(s);
          upsampled.push(0);
          upsampled.push(0);
          upsampled.push(0);
        }
        fft.forward(upsampled);
        context.clearRect(0, 0, canvas.width, canvas.height);
        newMaxTime = _.reduce(buffer, (function(max, next) {
          if (Math.abs(next) > max) {
            return Math.abs(next);
          } else {
            return max;
          }
        }), -Infinity);
        maxTime = newMaxTime > maxTime ? newMaxTime : maxTime;
        context.fillStyle = '#EEE';
        timeWidth = (canvas.width - 100) / upsampled.length;
        for (s = _l = 0, _ref1 = upsampled.length; 0 <= _ref1 ? _l < _ref1 : _l > _ref1; s = 0 <= _ref1 ? ++_l : --_l) {
          context.fillRect(timeWidth * s, canvas.height / 2, timeWidth, -(canvas.height / 2) * (buffer[s] / maxTime));
        }
        if (noiseCount < 10) {
          noiseThreshold = _.reduce(fft.spectrum, (function(max, next) {
            if (next > max) {
              return next;
            } else {
              return max;
            }
          }), noiseThreshold);
          noiseCount++;
        }
        spectrumPoints = (function() {
          var _m, _ref2, _results;
          _results = [];
          for (x = _m = 0, _ref2 = fft.spectrum.length / 4; 0 <= _ref2 ? _m < _ref2 : _m > _ref2; x = 0 <= _ref2 ? ++_m : --_m) {
            _results.push({
              x: x,
              y: fft.spectrum[x]
            });
          }
          return _results;
        })();
        spectrumPoints.sort(function(a, b) {
          if (a.y > b.y) {
            return -1;
          } else if (a.y === b.y) {
            return 0;
          }
          if (a.y < b.y) {
            return 1;
          }
        });
        peaks = [];
        for (p = _m = 0; _m < 8; p = ++_m) {
          if (spectrumPoints[p].y > noiseThreshold * 2) {
            peaks.push(spectrumPoints[p]);
          }
        }
        if (peaks.length > 0) {
          for (p = _n = 0, _ref2 = peaks.length; 0 <= _ref2 ? _n < _ref2 : _n > _ref2; p = 0 <= _ref2 ? ++_n : --_n) {
            if (peaks[p] != null) {
              for (q = _o = 0, _ref3 = peaks.length; 0 <= _ref3 ? _o < _ref3 : _o > _ref3; q = 0 <= _ref3 ? ++_o : --_o) {
                if (p !== q && (peaks[q] != null)) {
                  if (Math.abs(peaks[p].x - peaks[q].x) < 5) {
                    peaks[q] = null;
                  }
                }
              }
            }
          }
          peaks = (function() {
            var _len1, _p, _results;
            _results = [];
            for (_p = 0, _len1 = peaks.length; _p < _len1; _p++) {
              p = peaks[_p];
              if (p != null) {
                _results.push(p);
              }
            }
            return _results;
          })();
          peak = null;
          firstFreq = peaks[0].x * (sampleRate / fftSize);
          if (peaks.length > 1) {
            secondFreq = peaks[1].x * (sampleRate / fftSize);
            if ((1.4 < (_ref4 = firstFreq / secondFreq) && _ref4 < 1.6)) {
              peak = peaks[1];
            }
          }
          if (peaks.length > 2) {
            thirdFreq = peaks[2].x * (sampleRate / fftSize);
            if ((1.4 < (_ref5 = firstFreq / thirdFreq) && _ref5 < 1.6)) {
              peak = peaks[2];
            }
          }
          if (peaks.length > 2) {
            if (!(peak != null)) {
              peak = peaks[0];
            }
            left = {
              x: peak.x - 1,
              y: fft.spectrum[peak.x - 1]
            };
            right = {
              x: peak.x + 1,
              y: fft.spectrum[peak.x + 1]
            };
            freq = parabolicInterp(left, peak, right);
            _ref6 = getPitch(freq), note = _ref6[0], diff = _ref6[1];
            console.log('Note: ', note);
            console.log('Diff: ', diff);
          }
        }
        context.fillStyle = '#F77';
        freqWidth = (canvas.width - 100) / (fft.spectrum.length / 4);
        _results = [];
        for (f = _p = 10, _ref7 = (fft.spectrum.length / 4) - 10; 10 <= _ref7 ? _p < _ref7 : _p > _ref7; f = 10 <= _ref7 ? ++_p : --_p) {
          _results.push(context.fillRect(freqWidth * f, canvas.height / 2, freqWidth, -Math.pow(5 * fft.spectrum[f], 2)));
        }
        return _results;
      };
      return setInterval(data, 100);
    };
    error = function(e) {
      return console.log(e);
    };
    return navigator.getUserMedia(options, success, error);
  };

  $(function() {
    if (!window.AudioContext) {
      if (!window.webkitAudioContext) {
        throw Error('SHITTY BROWSER');
      }
      return window.AudioContext = window.webkitAudioContext;
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Tuner = Tuner;

}).call(this);
