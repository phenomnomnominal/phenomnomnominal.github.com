// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (typeof exports !== "undefined" && exports !== null ? exports : this).Scenes = (function() {
    var change, init, _getBlocks, _getOffAnimation, _getOnAnimation, _on;

    _on = [];
    _getOnAnimation = function(blockGroup) {
      switch (blockGroup.offDirection) {
        case 'LEFT':
          return Animate.POSITION.X(3000);
        case 'RIGHT':
          return Animate.POSITION.X(-3000);
        case 'UP':
          return Animate.POSITION.Y(-3000);
        case 'DOWN':
          return Animate.POSITION.Y(3000);
      }
    };
    _getOffAnimation = function(blockGroup) {
      switch (blockGroup.offDirection) {
        case 'LEFT':
          return Animate.POSITION.X(-3000);
        case 'RIGHT':
          return Animate.POSITION.X(3000);
        case 'UP':
          return Animate.POSITION.Y(3000);
        case 'DOWN':
          return Animate.POSITION.Y(-3000);
      }
    };
    _getBlocks = function(name) {
      var blockGroup, firstDot, n, scene, _ref, _ref1, _results;

      firstDot = name.indexOf('.');
      _ref = [name.substr(0, firstDot), name.substr(firstDot + 1)], scene = _ref[0], name = _ref[1];
      if (name && scene) {
        return [Blocks[scene][name]];
      } else {
        _ref1 = Blocks[name];
        _results = [];
        for (n in _ref1) {
          if (!__hasProp.call(_ref1, n)) continue;
          blockGroup = _ref1[n];
          _results.push(blockGroup);
        }
        return _results;
      }
    };
    init = function(callback) {
      return $.getJSON('scenes.json', function(result) {
        var blockName, blockNames, name, _i, _len, _ref;

        for (name in result) {
          if (!__hasProp.call(result, name)) continue;
          blockNames = result[name];
          if (!_.isFunction(blockNames)) {
            if ((_ref = Scenes[name]) == null) {
              Scenes[name] = {
                blockGroups: []
              };
            }
            for (_i = 0, _len = blockNames.length; _i < _len; _i++) {
              blockName = blockNames[_i];
              Scenes[name].blockGroups = Scenes[name].blockGroups.concat(_getBlocks(blockName));
            }
          }
        }
        return callback();
      });
    };
    change = function(scene, callback, newOn) {
      if (newOn == null) {
        newOn = [];
      }
      if (_on.length === 0) {
        callback();
      }
      _.each(_on, function(blockGroup) {
        var animation;

        if (__indexOf.call(Scenes[scene].blockGroups, blockGroup) < 0) {
          animation = _getOffAnimation(blockGroup);
          blockGroup.animate(animation, callback);
          return callback = null;
        } else {
          return newOn.push(blockGroup);
        }
      });
      _.each(Scenes[scene].blockGroups, function(blockGroup) {
        var animation;

        if (__indexOf.call(newOn, blockGroup) < 0) {
          animation = _getOnAnimation(blockGroup);
          blockGroup.animate(animation);
          return newOn.push(blockGroup);
        }
      });
      return _on = newOn;
    };
    return {
      init: init,
      change: change
    };
  })();

}).call(this);
