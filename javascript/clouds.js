// Generated by CoffeeScript 1.3.3
(function() {
  var CAMERA, Clouds, GROUPS, RENDERER, SCENE, WIND, World, initAxes, initEllipsoids, initLighting, pAct, pExt, pHum, root, start_time, windSpeed, world, xSmooth, ySmooth, zSmooth;

  pExt = 0.1;

  pAct = 0.001;

  pHum = 0.1;

  windSpeed = 1;

  xSmooth = 2;

  ySmooth = 2;

  zSmooth = 2;

  start_time = null;

  RENDERER = null;

  SCENE = null;

  CAMERA = null;

  Clouds = function() {
    var $container, animate, fog, geometry, height, i, material, mesh, plane, render, texture, width, _i;
    width = $(window).innerWidth();
    height = $('.clouds').innerHeight();
    start_time = new Date().getTime();
    $container = $('.clouds div');
    RENDERER = new THREE.WebGLRenderer({
      antialias: false
    });
    RENDERER.setSize(width, height);
    SCENE = new THREE.Scene();
    CAMERA = new THREE.PerspectiveCamera(30, width / height, 1, 3000);
    CAMERA.position.y = 40;
    CAMERA.position.z = 2000;
    SCENE.add(CAMERA);
    texture = THREE.ImageUtils.loadTexture('images/cloudTexture.png');
    texture.magFilter = THREE.LinearMipMapLinearFilter;
    texture.minFilter = THREE.LinearMipMapLinearFilter;
    fog = new THREE.Fog(0x4584b4, -100, 3000);
    material = new THREE.ShaderMaterial({
      uniforms: {
        'map': {
          type: "t",
          value: 2,
          texture: texture
        },
        'fogColor': {
          type: "c",
          value: fog.color
        },
        'fogNear': {
          type: "f",
          value: fog.near
        },
        'fogFar': {
          type: "f",
          value: fog.far
        }
      },
      vertexShader: $('#vs').text(),
      fragmentShader: $('#fs').text(),
      depthTest: false
    });
    geometry = new THREE.Geometry();
    plane = new THREE.Mesh(new THREE.PlaneGeometry(64, 64));
    for (i = _i = 0; _i < 8000; i = ++_i) {
      plane.position.x = Math.random() * 1000 - 500;
      plane.position.y = -Math.random() * Math.random() * 200 - 15;
      plane.position.z = i;
      plane.rotation.z = Math.random() * Math.PI;
      plane.scale.x = plane.scale.y = Math.random() * Math.random() * 1.5 + 0.5;
      THREE.GeometryUtils.merge(geometry, plane);
    }
    mesh = new THREE.Mesh(geometry, material);
    SCENE.add(mesh);
    mesh = new THREE.Mesh(geometry, material);
    mesh.position.z = -8000;
    SCENE.add(mesh);
    $container.append(RENDERER.domElement);
    initAxes(10000);
    $(window).resize(function() {
      width = $(window).innerWidth();
      height = $('.clouds').innerHeight();
      CAMERA.aspect = width / height;
      CAMERA.updateProjectionMatrix();
      return RENDERER.setSize(width, height);
    });
    $(window).trigger('resize');
    animate = function() {
      requestAnimFrame(animate);
      return render();
    };
    render = function() {
      var position;
      position = ((new Date().getTime() - start_time) * 0.03) % 8000;
      CAMERA.position.z = -position + 8000;
      return RENDERER.render(SCENE, CAMERA);
    };
    return animate();
  };

  World = (function() {
    var clouds, density, extinction, getCurrentState, getDensity, growth, logic, neighboursAct;

    function World(x, y, z, t) {
      var i, inc, primes, r, random, sieve, _i, _ref;
      this.x = x;
      this.y = y;
      this.z = z;
      this.t = t != null ? t : 0;
      sieve = function(n) {
        var a, i, j, p, s, _i, _j, _ref, _ref1;
        s = Math.sqrt(n);
        a = [];
        p = [2];
        for (i = _i = 3; _i <= n; i = _i += 2) {
          if (a[(i - 3) / 2]) {
            continue;
          }
          p.push(i);
          if (i > s) {
            continue;
          }
          for (j = _j = _ref = i * i, _ref1 = 2 * i; _ref <= n ? _j <= n : _j >= n; j = _j += _ref1) {
            a[(j - 3) / 2] = true;
          }
        }
        return p;
      };
      primes = sieve(1000);
      r = 0;
      inc = primes[Math.floor(Math.random() * primes.length)];
      random = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.x * this.y * this.z; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(Math.random());
        }
        return _results;
      }).call(this);
      this.getRandom = function(n, p) {
        if (r >= random.length) {
          r = 0;
        }
        return ((function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
            _results.push(random[r += inc] < p ? 1 : 0);
          }
          return _results;
        })()).join('');
      };
      this.size = this.x * this.y * this.z;
      this.currentGen = {
        hum: '',
        act: '',
        cld: ''
      };
      for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.currentGen.hum += this.getRandom(1, 0.5);
        this.currentGen.act += this.getRandom(1, 0.5);
        this.currentGen.cld += 0;
      }
      this.clouds = {
        current: clouds.call(this)
      };
      this.density = {
        current: density.call(this, this.clouds.current)
      };
    }

    World.prototype.nextGeneration = function() {
      var prevCld, prevDen;
      console.time('growthTime');
      this.process(growth);
      console.timeEnd('growthTime');
      console.time('extinctionTime');
      this.process(extinction);
      console.timeEnd('extinctionTime');
      prevCld = this.clouds.current;
      prevDen = this.density.current;
      console.time('cloudsTime');
      this.clouds = {
        previous: prevCld,
        current: clouds.call(this)
      };
      console.timeEnd('cloudsTime');
      console.time('densityTime');
      this.density = {
        previous: prevDen,
        current: density.call(this, this.clouds.current)
      };
      return console.timeEnd('densityTime');
    };

    logic = {
      and: function(str1, str2, res) {
        var i, _i, _ref;
        if (res == null) {
          res = '';
        }
        for (i = _i = 0, _ref = str1.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          res += "" + (str1[i] && str2[i]);
        }
        return res;
      },
      or: function(str1, str2, res) {
        var i, _i, _ref;
        if (res == null) {
          res = '';
        }
        for (i = _i = 0, _ref = str1.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          res += "" + (str1[i] || str2[i]);
        }
        return res;
      },
      not: function(str) {
        return str.replace(/0|1/g, (function(a, m) {
          if (m === '0') {
            return '1';
          } else {
            return '0';
          }
        }));
      }
    };

    World.prototype.process = function(func, newHum, newAct, newCld) {
      var _ref;
      if (newHum == null) {
        newHum = '';
      }
      if (newAct == null) {
        newAct = '';
      }
      if (newCld == null) {
        newCld = '';
      }
      this.previousGen = World.Clone(this.currentGen);
      _ref = func.call(this), newHum = _ref[0], newAct = _ref[1], newCld = _ref[2];
      return this.currentGen = {
        hum: newHum,
        act: newAct,
        cld: newCld
      };
    };

    getCurrentState = function() {
      return [this.previousGen.hum, this.previousGen.act, this.previousGen.cld];
    };

    growth = function(nAct) {
      var act, cld, hum, i, newAct, newCld, newHum, _i, _ref, _ref1;
      if (nAct == null) {
        nAct = '';
      }
      _ref = getCurrentState.call(this), hum = _ref[0], act = _ref[1], cld = _ref[2];
      for (i = _i = 0, _ref1 = this.size; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        nAct += "" + (neighboursAct.call(this, i) ? 1 : 0);
      }
      newHum = logic.and(hum, logic.not(act));
      newAct = logic.and(logic.and(logic.not(act), hum), nAct);
      newCld = logic.or(hum, act);
      return [newHum, newAct, newCld];
    };

    neighboursAct = function(i) {
      var prev, x, y;
      prev = this.previousGen.act;
      x = this.y * this.z;
      y = this.z;
      return prev[i + x] || prev[i + y] || prev[i + 1] || prev[i - x] || prev[i - y] || prev[i - 1] || prev[i - 2 * x] || prev[i + 2 * x] || prev[i - 2 * y] || prev[i + 2 * y] || prev[i - 2];
    };

    extinction = function() {
      var act, cld, hum, newAct, newCld, newHum, randAct, randCld, randHum, _ref;
      _ref = getCurrentState.call(this), hum = _ref[0], act = _ref[1], cld = _ref[2];
      randHum = this.getRandom(this.size, pHum);
      randAct = this.getRandom(this.size, pAct);
      randCld = this.getRandom(this.size, 1 - pExt);
      newHum = logic.or(hum, randHum);
      newAct = logic.or(act, randAct);
      newCld = logic.and(cld, randCld);
      return [newHum, newAct, newCld];
    };

    clouds = function() {
      var c, cld, x, y, z, _base, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4;
      cld = this.currentGen.cld;
      c = [];
      for (x = _i = 0, _ref = this.x; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        if ((_ref1 = c[x]) == null) {
          c[x] = [];
        }
        for (y = _j = 0, _ref2 = this.y; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; y = 0 <= _ref2 ? ++_j : --_j) {
          if ((_ref3 = (_base = c[x])[y]) == null) {
            _base[y] = [];
          }
          for (z = _k = 0, _ref4 = this.z; 0 <= _ref4 ? _k < _ref4 : _k > _ref4; z = 0 <= _ref4 ? ++_k : --_k) {
            c[x][y][z] = +cld[x * this.x + y * this.y + z];
          }
        }
      }
      return c;
    };

    density = function(clouds) {
      var d, x, y, z, _i, _ref, _ref1, _results;
      d = [];
      _results = [];
      for (x = _i = 0, _ref = this.x; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        if ((_ref1 = d[x]) == null) {
          d[x] = [];
        }
        _results.push((function() {
          var _base, _j, _ref2, _ref3, _results1;
          _results1 = [];
          for (y = _j = 0, _ref2 = this.y; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; y = 0 <= _ref2 ? ++_j : --_j) {
            if ((_ref3 = (_base = d[x])[y]) == null) {
              _base[y] = [];
            }
            _results1.push((function() {
              var _k, _ref4, _results2;
              _results2 = [];
              for (z = _k = 0, _ref4 = this.z; 0 <= _ref4 ? _k < _ref4 : _k > _ref4; z = 0 <= _ref4 ? ++_k : --_k) {
                _results2.push(d[x][y][z] = getDensity(clouds, x, y, z));
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    getDensity = function(clouds, x, y, z) {
      var d, exists, weight, xs, ys, zs, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      weight = function(dx, dy, dz) {
        return Math.sqrt((dx * dx) + (dy * dy) + (dz * dz));
      };
      d = 0;
      for (xs = _i = _ref = x - xSmooth, _ref1 = x + xSmooth; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; xs = _ref <= _ref1 ? ++_i : --_i) {
        for (ys = _j = _ref2 = y - ySmooth, _ref3 = y + ySmooth; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; ys = _ref2 <= _ref3 ? ++_j : --_j) {
          for (zs = _k = _ref4 = z - zSmooth, _ref5 = z + zSmooth; _ref4 <= _ref5 ? _k <= _ref5 : _k >= _ref5; zs = _ref4 <= _ref5 ? ++_k : --_k) {
            exists = ((_ref6 = clouds[x + xs]) != null ? (_ref7 = _ref6[y + ys]) != null ? _ref7[y + zs] : void 0 : void 0) != null;
            d += (exists && clouds[x + xs][y + ys][z + zs] === 1 ? weight(xs, ys, zs) : 0);
          }
        }
      }
      return d / ((2 * xSmooth + 1) * (2 * ySmooth + 1) * (2 * zSmooth + 1));
    };

    World.Clone = function(world) {
      var clone;
      return clone = {
        hum: world.hum,
        act: world.act,
        cld: world.cld
      };
    };

    return World;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Clouds = Clouds;

  world = null;

  start_time = null;

  RENDERER = null;

  SCENE = null;

  CAMERA = null;

  GROUPS = null;

  WIND = {
    x: Math.random(),
    y: Math.random()
  };

  initAxes = function(length) {
    var createAxis, v;
    v = function(x, y, z) {
      return new THREE.Vector3(x, y, z);
    };
    createAxis = function(p1, p2, color) {
      var line, lineGeometry, lineMaterial;
      lineGeometry = new THREE.Geometry();
      lineMaterial = new THREE.LineBasicMaterial({
        color: color,
        lineWidth: 1
      });
      lineGeometry.vertices.push(p1, p2);
      line = new THREE.Line(lineGeometry, lineMaterial);
      return SCENE.add(line);
    };
    createAxis(v(-length, 0, 2500), v(length, 0, 2500), 0xFF0000);
    createAxis(v(0, -length, 2500), v(0, length, 2500), 0x00FF00);
    return createAxis(v(0, 0, -length), v(0, 0, length), 0x0000FF);
  };

  initEllipsoids = function() {
    var ellipsoid, group, i, materials, positionX, positionY, positionZ, radius, rings, scaleX, scaleY, scaleZ, segments, _i, _j, _len, _results;
    radius = 10;
    segments = 16;
    rings = 16;
    materials = [
      new THREE.MeshBasicMaterial({
        color: 0xFF0000,
        wireframe: true
      }), new THREE.MeshBasicMaterial({
        color: 0x00FF00,
        wireframe: true
      }), new THREE.MeshBasicMaterial({
        color: 0x0000FF,
        wireframe: true
      })
    ];
    GROUPS = [new THREE.Object3D(), new THREE.Object3D(), new THREE.Object3D()];
    for (i = _i = 0; _i < 300; i = ++_i) {
      ellipsoid = new THREE.Mesh(new THREE.SphereGeometry(radius, segments, rings), materials[i % 3]);
      scaleX = Math.floor(Math.random() * 101) + 5;
      scaleY = Math.floor(Math.random() * 101) + 5;
      scaleZ = Math.floor(Math.random() * 21) + 1;
      positionX = Math.floor(Math.random() * 10001) - 5000;
      positionY = Math.floor(Math.random() * 10001) - 5000;
      positionZ = Math.floor(Math.random() * 201) + 1500;
      GROUPS[i % 3].add(ellipsoid);
      ellipsoid.scale.set(scaleX, scaleY, scaleZ);
      ellipsoid.position.set(positionX, positionY, positionZ);
    }
    _results = [];
    for (_j = 0, _len = GROUPS.length; _j < _len; _j++) {
      group = GROUPS[_j];
      _results.push(SCENE.add(group));
    }
    return _results;
  };

  initLighting = function() {
    var ambient, sun;
    ambient = new THREE.AmbientLight(0xDFDFFF);
    SCENE.add(ambient);
    sun = new THREE.PointLight(0xFFFFBB, 100000, 5000);
    sun.position.set(0, 0, 10000);
    return SCENE.add(sun);
  };

  $(function() {
    /*
      $canvas = $('<canvas/>')
      $('.wrapper').append($canvas).promise().done ->
        $canvas = $('canvas')[0]
        $canvas.width = 32
        $canvas.height = $(window).innerHeight()
        context = $canvas.getContext '2d'
        gradient = context.createLinearGradient 0, 0, 0, $canvas.height
        gradient.addColorStop 0, "#1e4877"
        gradient.addColorStop 0.5, "#4584b4"
        context.fillStyle = gradient
        context.fillRect 0, 0, $canvas.width, $canvas.height
        $('.wrapper').css background: "url('#{$canvas.toDataURL('image/png')}')"
        $canvas.remove()
    */

  });

}).call(this);
