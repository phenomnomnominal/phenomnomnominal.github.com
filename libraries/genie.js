// Generated by CoffeeScript 1.6.3
(function() {
  var Chromosome, Genie, root;

  Chromosome = (function() {
    function Chromosome(genes) {
      this.genes = genes;
    }

    Chromosome.Random = function(numberOfGenes) {
      var genes, n, _i;
      genes = [];
      for (n = _i = 0; 0 <= numberOfGenes ? _i < numberOfGenes : _i > numberOfGenes; n = 0 <= numberOfGenes ? ++_i : --_i) {
        genes[n] = Math.random() * Math.pow(2, 32) - Math.pow(2, 31);
      }
      return new Chromosome(genes);
    };

    Chromosome.Breed = function(parentOne, parentTwo, mutationRate) {
      var gene, genes, n, random, _i, _ref;
      genes = [];
      for (n = _i = 0, _ref = parentOne.genes.length; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
        random = Math.random();
        gene = random < 0.5 ? parentOne.genes[n] : parentTwo.genes[n];
        if (random < mutationRate) {
          gene = Math.random() * Math.pow(2, 32) - Math.pow(2, 31);
        }
        genes[n] = gene;
      }
      return new Chromosome(genes);
    };

    return Chromosome;

  })();

  Genie = (function(Genie, _, bestFit, generation) {
    var getBestFit, getGeneration, init, kill, reportFitness, run, _checkOptions, _complete, _getFitness, _getNextChromosome, _getParallelFitness;
    _.defaultOptions = {
      populationSize: 32,
      mutationRate: 0.1,
      survivalRate: 0.33,
      useWorkers: false,
      generationDone: function() {}
    };
    getBestFit = function() {
      return bestFit;
    };
    getGeneration = function() {
      return generation;
    };
    init = function(options) {
      var n;
      _.kill = false;
      _.options = {};
      _.options.LOGGING = _checkOptions.logging(options.logging);
      _.options.MUTATION_RATE = _checkOptions.mutationRate(options.mutationRate);
      _.options.NUMBER_OF_GENES = _checkOptions.numberOfGenes(options.numberOfGenes);
      _.options.POPULATION_SIZE = _checkOptions.populationSize(options.populationSize);
      _.options.SURVIVAL_RATE = _checkOptions.survivalRate(options.survivalRate);
      _.options.USE_WORKERS = _checkOptions.useWorkers(options.useWorkers);
      _.options.EVALUATE_FITNESS = _checkOptions.evaluateFitness(options.evaluateFitness);
      _.options.GENERATION_DONE = _checkOptions.generationDone(options.generationDone);
      _.options.WORKER_SCRIPT_PATH = _checkOptions.workerScriptPath(options.workerScriptPath);
      _.options.WORKER_MESSAGE_HANDLER = _checkOptions.workerMessageHandler(options.workerMessageHandler);
      _.population = (function() {
        var _i, _ref, _results;
        _results = [];
        for (n = _i = 0, _ref = _.options.POPULATION_SIZE; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
          _results.push(Chromosome.Random(_.options.NUMBER_OF_GENES));
        }
        return _results;
      })();
      if (_.options.USE_WORKERS > 0) {
        _.currentChromosomeIndex = [];
      }
      bestFit = {
        fit: 0
      };
      generation = 0;
      return _.options.INITIALISED = true;
    };
    run = function() {
      var n;
      if (!_.options.INITIALISED) {
        throw Error('Genie - Genie must first be initialised before the `run()` function is called.');
      }
      generation += 1;
      if (_.options.LOGGING) {
        console.info("Genie - Starting generation " + generation + ".");
      }
      if (_.options.USE_WORKERS > 0) {
        _.workers = (function() {
          var _i, _ref, _results;
          _results = [];
          for (n = _i = 0, _ref = _.options.USE_WORKERS; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
            _results.push(null);
          }
          return _results;
        })();
        return _getParallelFitness();
      } else {
        return _getFitness();
      }
    };
    kill = function() {
      _.kill = true;
      return _.options.INITIALISED = false;
    };
    reportFitness = function(fitness, index) {
      _.population[index].fit = fitness;
      _.population[index].running = false;
      if (_.options.USE_WORKERS > 0) {
        return _getParallelFitness();
      } else {
        return _getFitness();
      }
    };
    _checkOptions = {
      generationDone: function(generationDone) {
        if (!((generationDone != null) && typeof generationDone === 'function')) {
          if (_.options.LOGGING) {
            console.warn('Genie - Options Warning: GenerationDone handler must be a function.');
            console.info('Genie - Setting GenerationDone to no-op.');
          }
          generationDone = _.defaultOptions.generationDone;
        }
        return generationDone;
      },
      evaluateFitness: function(evaluateFitness) {
        if (!_.options.USE_WORKERS) {
          if (!((evaluateFitness != null) && typeof evaluateFitness === 'function')) {
            throw Error('Genie - Options Error: The fitness evalutation function must be defined.');
          }
        }
        return evaluateFitness;
      },
      logging: function(logging) {
        if (logging != null) {
          logging = !!logging;
        }
        return logging && (typeof console !== "undefined" && console !== null) && (console.log != null) && (console.warn != null);
      },
      mutationRate: function(mutationRate) {
        if (!((0 <= mutationRate && mutationRate <= 1))) {
          if (_.options.LOGGING) {
            console.warn('Genie - Options Warning: Mutation rate must be a probability from 0 to 1');
            console.info('Genie - Setting mutation rate to default value of 0.1.');
          }
          mutationRate = _.defaultOptions.mutationRate;
        }
        return mutationRate;
      },
      numberOfGenes: function(numberOfGenes) {
        if (!(numberOfGenes > 0)) {
          throw Error('Genie - Options Error: The number of genes for each Chromosome must be greater than 0.');
        }
        return numberOfGenes;
      },
      populationSize: function(populationSize) {
        if (!(populationSize > 0)) {
          if (_.options.LOGGING) {
            console.warn('Genie - Options Warning: Population size must be greater than 0.');
            console.info('Genie - Setting population size to default value of 32.');
          }
          populationSize = _.defaultOptions.populationSize;
        }
        return populationSize;
      },
      survivalRate: function(survivalRate) {
        if (!((0 <= survivalRate && survivalRate <= 1))) {
          if (_.options.LOGGING) {
            console.warn('Genie - Options Warning: Survival rate must be a probability from 0 to 1.');
            console.info('Genie - Setting survival rate to default value of 0.33.');
          }
          survivalRate = _.defaultOptions.survivalRate;
        }
        return survivalRate;
      },
      useWorkers: function(useWorkers) {
        if (!((useWorkers != null) && useWorkers > 0 && (typeof Worker !== "undefined" && Worker !== null) && (typeof Worker === 'function' || typeof Worker === 'object'))) {
          useWorkers = false;
        }
        return useWorkers;
      },
      workerScriptPath: function(workerScriptPath) {
        if (_.options.USE_WORKERS > 0) {
          if (!((workerScriptPath != null) && typeof workerScriptPath === 'string')) {
            throw Error('Genie - Options Error: the worker script path must be defined to use WebWorkers.');
          }
        }
        return workerScriptPath;
      },
      workerMessageHandler: function(workerMessageHandler) {
        if (_.options.USE_WORKERS > 0) {
          if (!((workerMessageHandler != null) && typeof workerMessageHandler === 'function')) {
            throw Error('Genie - Options Error: The worker message handler function must be defined to use WebWorkers.');
          }
        }
        return workerMessageHandler;
      }
    };
    _getNextChromosome = function(population) {
      var c, chromosome, _i, _j, _len, _ref;
      for (c = _i = 0, _ref = population.length; 0 <= _ref ? _i < _ref : _i > _ref; c = 0 <= _ref ? ++_i : --_i) {
        chromosome = population[c];
        if (!((chromosome.fit != null) || chromosome.running)) {
          chromosome.running = true;
          return c;
        }
      }
      for (_j = 0, _len = population.length; _j < _len; _j++) {
        chromosome = population[_j];
        if (chromosome.running) {
          return "STILL RUNNING";
        }
      }
      return "GENERATION FINISHED";
    };
    _getFitness = function() {
      var chromosomeIndex;
      if (!_.kill) {
        chromosomeIndex = _getNextChromosome(_.population);
        if (chromosomeIndex >= 0) {
          if (_.options.LOGGING) {
            console.info("Genie - Evaluating fitness of chromosome " + (chromosomeIndex + 1) + ".");
          }
          return _.options.EVALUATE_FITNESS(_.population[chromosomeIndex], chromosomeIndex);
        } else {
          if (chromosomeIndex === "GENERATION FINISHED") {
            if (_.options.LOGGING) {
              console.info("Genie - Generation " + generation + " complete.");
            }
            return _complete.call(this);
          }
        }
      }
    };
    _getParallelFitness = function() {
      var chromosomeIndex, w, worker, workerTasks, _i, _ref, _results;
      _results = [];
      while (_.workers.length < _.options.USE_WORKERS || _.workers.indexOf(null) >= 0) {
        if (!_.kill) {
          chromosomeIndex = _getNextChromosome(_.population);
          if (chromosomeIndex >= 0) {
            if (_.options.LOGGING) {
              console.info("Genie - Evaluating fitness of chromosome " + (chromosomeIndex + 1) + ".");
            }
            worker = new Worker(_.options.WORKER_SCRIPT_PATH);
            workerTasks = function(e) {
              if (e.data.func === 'complete' || _.kill) {
                this.terminate();
                _.workers[_.workers.indexOf(this)] = null;
              }
              if (e.data.func === 'log') {
                return console.log(e.data.log);
              }
            };
            worker.addEventListener('message', workerTasks);
            worker.addEventListener('message', _.options.WORKER_MESSAGE_HANDLER);
            _.workers[_.workers.indexOf(null)] = worker;
            _results.push(worker.postMessage({
              func: 'evaluateFitness',
              chromosome: _.population[chromosomeIndex],
              index: {
                chromosomeIndex: chromosomeIndex,
                workerIndex: _.workers.indexOf(worker)
              }
            }));
          } else {
            if (chromosomeIndex === "STILL RUNNING") {
              for (w = _i = 0, _ref = _.workers.length; 0 <= _ref ? _i < _ref : _i > _ref; w = 0 <= _ref ? ++_i : --_i) {
                if (_.workers[w] === null) {
                  _.workers[w] = void 0;
                }
              }
            }
            if (chromosomeIndex === "GENERATION FINISHED") {
              if (_.options.LOGGING) {
                console.info("Genie - Generation " + generation + " complete.");
              }
              _results.push(_complete());
            } else {
              _results.push(void 0);
            }
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    _complete = function() {
      var bag, chromosome, getIndex, n, parentOne, parentTwo, populationWeights, _i, _len, _ref;
      _.population.sort(function(a, b) {
        return b.fit - a.fit;
      });
      if (_.population[0].fit > bestFit.fit) {
        bestFit = {
          genes: _.population[0].genes,
          fit: _.population[0].fit
        };
        if (_.options.LOGGING) {
          console.info("Genie - New best fitting chomosome found with fit = " + bestFit.fit);
        }
      }
      _.population = _.population.slice(0, Math.floor(_.population.length * _.options.SURVIVAL_RATE));
      populationWeights = (function() {
        var _i, _ref, _results;
        _results = [];
        for (n = _i = 1, _ref = _.population.length; 1 <= _ref ? _i <= _ref : _i >= _ref; n = 1 <= _ref ? ++_i : --_i) {
          _results.push(1 / Math.pow(2, n));
        }
        return _results;
      })();
      getIndex = function(bag) {
        var random, selected, w, _i, _ref;
        random = Math.random();
        selected = null;
        for (w = _i = 0, _ref = bag.length; 0 <= _ref ? _i < _ref : _i > _ref; w = 0 <= _ref ? ++_i : --_i) {
          if (selected == null) {
            if (random > populationWeights[w]) {
              selected = w;
            }
          }
        }
        return bag.splice(selected, 1)[0];
      };
      while (_.population.length < _.options.POPULATION_SIZE) {
        bag = (function() {
          var _i, _ref, _results;
          _results = [];
          for (n = _i = 0, _ref = _.population.length; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
            _results.push(n);
          }
          return _results;
        })();
        parentOne = _.population[getIndex(bag)];
        parentTwo = _.population[getIndex(bag)];
        _.population.push(Chromosome.Breed(parentOne, parentTwo, _.options.MUTATION_RATE));
      }
      _ref = _.population;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chromosome = _ref[_i];
        delete chromosome.fit;
        delete chromosome.running;
      }
      _.options.GENERATION_DONE();
      return run();
    };
    return Genie = {
      init: init,
      run: run,
      kill: kill,
      reportFitness: reportFitness,
      getBestFit: getBestFit,
      getGeneration: getGeneration
    };
  })({}, {}, null, null);

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Genie = Genie;

}).call(this);
